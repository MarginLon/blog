(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{378:function(t,n,a){"use strict";a.r(n);var v=a(7),_=Object(v.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ul",[n("li",[n("a",{attrs:{href:"#1-%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98"}},[t._v("1. 堆栈内存")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#2-%E5%87%BD%E6%95%B0%E5%BA%95%E5%B1%82%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6"}},[t._v("2. 函数底层运行机制")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#3-%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F"}},[t._v("3. 块级作用域")])])]),t._v(" "),n("h2",{attrs:{id:"_1-堆栈内存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-堆栈内存"}},[t._v("#")]),t._v(" 1. 堆栈内存")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://github.com/MarginLon/MarginPostImage/blob/master/%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98(%E4%BE%8B).png?raw=true",alt:"堆栈内存(例)"}})]),t._v(" "),n("ul",[n("li",[n("p",[t._v("栈内存(Stack)")]),t._v(" "),n("ul",[n("li",[t._v("执行环境栈 EC stack (execution context stack)\n"),n("ul",[n("li",[t._v("EC(G) 全局执行上下文，全局代码执行\n"),n("ul",[n("li",[t._v("VO(G) 全局变量对象[存储全局上下文中声明的变量]\n"),n("ul",[n("li",[t._v("特殊性：var/function声明的变量存于GO中, let/const存于VO(G).")])])])])]),t._v(" "),n("li",[t._v("EC(X) 某函数的执行上下文")])])])])]),t._v(" "),n("li",[n("p",[t._v("堆内存(Heap)")]),t._v(" "),n("ul",[n("li",[t._v("赋予一个16进制地址，对象中的键值依次存储，内存地址放在栈中供变量引用。")]),t._v(" "),n("li",[t._v("GO(global object) 全局对象 [window]")])])]),t._v(" "),n("li",[n("p",[t._v("等号赋值")]),t._v(" "),n("ol",[n("li",[t._v("创建值"),n("br"),t._v("\n原始值类型的值，储存在栈内，对象数据类型单独开辟堆内存")]),t._v(" "),n("li",[t._v("声明变量"),n("br"),t._v("\n把声明的变量存储到当前上下文的变量对象中，如EC(G)")]),t._v(" "),n("li",[t._v("赋值"),n("br"),t._v("\n指针的指向，对象类型赋值内存地址")])])]),t._v(" "),n("li",[n("p",[t._v("全局上下文遇到变量")]),t._v(" "),n("ul",[n("li",[t._v("VO(G) => GO => Error")]),t._v(" "),n("li",[t._v("window.xxx => GO => undefined")])])])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"_2-函数底层运行机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数底层运行机制"}},[t._v("#")]),t._v(" 2. 函数底层运行机制")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://github.com/MarginLon/MarginPostImage/blob/master/%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6.png?raw=true",alt:"函数底层运行机制"}})]),t._v(" "),n("ul",[n("li",[t._v("正常的函数创建 "),n("code",[t._v("function fn(y){...}")])]),t._v(" "),n("li",[t._v("匿名函数之函数表达式 "),n("code",[t._v("var fn = function(y){...};")])]),t._v(" "),n("li",[t._v("创建步骤：\n"),n("ol",[n("li",[t._v("开辟堆内存空间")]),t._v(" "),n("li",[t._v("声明函数作用域scope，存储代码（字符串），存储对象键值对（函数名，形参个数）。")]),t._v(" "),n("li",[t._v("16进制地址存入栈中以供引用")])])]),t._v(" "),n("li",[t._v("执行步骤\n"),n("ol",[n("li",[n("p",[t._v("形成一个全新的私有context => EC(FN) AO(FN) 进栈 （AO:ActiveObject 变量对象）")])]),t._v(" "),n("li",[n("p",[t._v("初始化作用域链[Scope-chain]")]),t._v(" "),n("ul",[n("li",[t._v("<当前自己的私有context，函数的作用域> => 链的右侧是当前context的“上级”context")])])]),t._v(" "),n("li",[n("p",[t._v("初始化this")])]),t._v(" "),n("li",[n("p",[t._v("初始化arguments")])]),t._v(" "),n("li",[n("p",[t._v("形参赋值：当前上下文声明一个形参变量，并传递实参值，非严格模式建立映射机制：集合中的每一项和对应的形参变量绑定（只在代码执行之前）。")])]),t._v(" "),n("li",[n("p",[t._v("变量提升")]),t._v(" "),n("ul",[n("li",[t._v("var/function 提前声明/定义")]),t._v(" "),n("li",[t._v("基于var/function 全局context 声明的变量映射到GO(window)一份，并随动。")]),t._v(" "),n("li",[t._v("if 无论条件是否成立，都变量提升（条件中带function在新浏览器只提前声明，不提前赋值）")])]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("AAA")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数表达式匿名函数“具名化”，不能外部访问")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数内部私有context会把名字作为context的变量")]),t._v("\n "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// AAA(); 递归调用 而非arguments.callee")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])])]),t._v(" "),n("li",[n("p",[t._v("代码执行")]),t._v(" "),n("ul",[n("li",[t._v("变量：私有则只操作自己，和外界无关；如果不是自己私有，则基于chain向context查找，是否为上级私有，如果不是，继续向上查找，直到EC(G)，即"),n("span",{staticStyle:{color:"red"}},[t._v("作用域链查找机制")])])])]),t._v(" "),n("li",[n("p",[t._v("出栈 or 不出栈")])])])])]),t._v(" "),n("hr"),t._v(" "),n("h2",{attrs:{id:"_3-块级作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-块级作用域"}},[t._v("#")]),t._v(" 3. 块级作用域")]),t._v(" "),n("ul",[n("li",[t._v("除“函数和对象”的大括号外,出现了 let/const/function/class 等关键词声明变量，产生一个“块级私有context”")]),t._v(" "),n("li",[t._v("块级作用域内默认变量\n"),n("ul",[n("li",[t._v("不带var，let，const，只有执行过定义的变量的代码后才可以访问，之前会报错,window对象上为undefined")]),t._v(" "),n("li",[t._v("块内默认变量依旧是全局变量")]),t._v(" "),n("li",[t._v("在块内的默认变量没执行之前不可以访问这个变量")])])]),t._v(" "),n("li",[t._v("块级作用域函数声明\n"),n("ul",[n("li",[n("span",{staticStyle:{color:"red"}},[t._v("块内函数声明会提升到块顶部，也会在全局作用域用var声明一个同名的undefined变量")])]),t._v(" "),n("li",[t._v("块外的全局同名变量的赋值时机是执行完块内函数声明语句")]),t._v(" "),n("li",[n("span",{staticStyle:{color:"red"}},[t._v("执行到函数声明时，这行代码以前的所有操作同步给全局一份，之后的操作只与私有context有关。")])])])]),t._v(" "),n("li",[t._v("块内同时有同名的默认变量和函数声明\n"),n("ul",[n("li",[t._v("块内的函数声明每次执行的时候都会给全局那个同名的变量赋值一次，并且，只有执行那个定义函数声明的代码才会触发赋值，你写的函数声明就相当于setter,每执行一次就给外部的那个同名的变量赋值一次")]),t._v(" "),n("li",[t._v("如果块内同时有同名的函数声明和默认的变量声明，那给默认的变量赋值时其实相当于赋值给那个同名的函数，因为查找块内的作用域链时找到了,就不会往全局声明了。\n"),n("img",{attrs:{src:"https://github.com/MarginLon/theImages/blob/master/%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F_%E5%8F%98%E9%87%8F.png?raw=true",alt:"块级作用域_变量"}}),t._v(" "),n("img",{attrs:{src:"https://github.com/MarginLon/theImages/blob/master/%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F_%E5%87%BD%E6%95%B0.png?raw=true",alt:"块级作用域_函数"}})])])])])])}),[],!1,null,null,null);n.default=_.exports}}]);